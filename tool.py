#!/usr/bin/env python
# encoding: utf-8
########################################################################
## Привет.
## Это мой персональный проект
## Я хотел бы разобраться и доработать этот инструмент для пентестинга
## Если у вас есть вопросы по работе утилиты пишите мне:
## igvofaowd6bf@mail.ru
########################################################################

MIN_ENTROPY=3.3
MAX_FILE_WINDOW_SIZE=1000000 #recommended: 1000000
MAX_OVERLAP_WINDOW_SIZE=5000
MIN_AV=5
MAX_PREPROCESS_ERRORS=20
BAD_CHARS="\n\r-" # chars to be ignored by validators

# data types: bytes, numbers, text, hex, bytecodes
import re,sys,argparse,base64
from urlparse import urlparse
from encodings import aliases
import string, math
from collections import Counter
from datetime import datetime
import io, struct, os

########################################################################
class Finding:
	"""
	represents a potential finding
	"""

	#----------------------------------------------------------------------
	def __init__(self, findingType, payload, location=None, certainty=None, details=None):
		"""define a finding"""
		self.type = findingType
		self.payload = payload
		self.location=location[0]+location[1][0]
		self.size = location[1][1]-location[1][0]
		self.certainty = certainty
		self.details = details
		self.created_on = datetime.now()

	def getConfidence(self):
		if self.certainty >= 80:
			return 'confident'
		elif self.certainty >= 60 and self.certainty < 80:
			return 'likely'
		else:
			return 'possible'

	def setConfidence(self):
		pass


	confidence = property(getConfidence, setConfidence)

	def __str__(self):
		return "%s  [%s]" % (self.details , self.getConfidence)

	def display(self):
		return "%s\t(%s:%s:%s[%d]:%s)" % (self.details, self.type , self.location, self.confidence, self.certainty, self.created_on)

# from http://rosettacode.org/wiki/Entropy#Python
def entropy(s):
	p, lns = Counter(s), float(len(s))
	return -sum( count/lns * math.log(count/lns, 2) for count in p.values())
